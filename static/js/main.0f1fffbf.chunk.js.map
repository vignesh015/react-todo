{"version":3,"sources":["Add.js","Header.js","View.js","App.js","serviceWorker.js","index.js"],"names":["Add","props","state","title","completed","onChange","bind","onClick","onSubmit","e","this","setState","target","name","value","checked","preventDefault","AddTodo","className","placeholder","required","type","id","Component","Header","View","delTodo","marktog","edit","isDone","todos","map","todo","index","key","trColor","style","textDecoration","MarkToggle","href","color","onDelete","React","uuidv4","require","App","DelTodo","EditTodo","newTodo","swal","newTitle","prompt","window","confirm","filter","length","maxWidth","height","marginBottom","alt","src","addDel","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f1fffbf.chunk.js","sourcesContent":["import React,{ Component } from 'react';\n\nclass Add extends Component \n    {\n    constructor(props)\n    {\n        super(props);\n        this.state=\n        {\n            title: '',\n            completed: false\n        }\n        this.onChange=this.onChange.bind(this);\n        this.onClick=this.onClick.bind(this);\n        this.onSubmit=this.onSubmit.bind(this);\n    }\n \n    onChange(e)\n    {\n    \n        \n        this.setState({[e.target.name] : e.target.value});\n    }\n    \n    onClick(e)\n    {\n    \n        \n        this.setState({[e.target.name] : e.target.checked});\n        \n    }\n    \n    onSubmit(e)\n    {\n         \n        e.preventDefault();\n        this.props.AddTodo(this.state.title,this.state.completed);\n        this.setState({title: '',completed: false});\n        \n        \n        \n    }\n    \n    \n    render(){\n    return(\n        <div className=\"container text-center p-3 mb-2\">\n        <h2 className=\"mt-2\">Add New Item</h2>\n          <form className=\"form\" onSubmit={this.onSubmit}>\n         <input className=\"form-control\"  placeholder=\"AddNew Todo\" required type=\"text\" name=\"title\" onChange={this.onChange} value={this.state.title}/>\n         <div className=\" my-2\"><input id=\"chkbox\" checked={this.state.completed} name=\"completed\" onChange={this.onClick } \n type=\"checkbox\"/>{\" \"}Todo Completed?</div>\n         <input type=\"submit\" className=\"btn btn-info \"/>\n         </form>\n         </div>\n         )\n        }\n        \n    }\n\nexport default Add;\n","import React from \"react\";\n\nfunction Header(){\n        return(\n            <h2 className=\"mt-2 p-2\">Todo List Items\n            </h2>\n        )\n    }\n\nexport default Header;\n","import React from \"react\";\nimport Header from \"./Header\";\n\nclass View extends React.Component\n{\n\n\n    onDelete(e)\n    {\n       this.props.delTodo(e);\n\n    }\n\n    MarkToggle(id)\n    {\n        this.props.marktog(id);\n    }\n\n    edit(id,title)\n    {\n        this.props.edit(id,title)\n    }\n\n    trColor(isDone)\n    {\n        return isDone?\"text-success\":\"text-danger\";\n    }\n\n\n\n    render(){\n\n        return(\n        <div className=\"container\">\n        <Header/>\n            <table className=\" mb-3 table table-bordered table-responsive table-striped\">\n            <tbody>\n            <tr className=\"bg-secondary text-white\">\n            <th>\n                S.No\n            </th>\n            <th>\n                Title\n            </th>\n            <th>\n               Todo Completed\n            </th>\n            <th>\n                Edit Todo\n            </th>\n            <th>\n                Delete Todo\n            </th>\n            </tr>\n            {\n                this.props.todos.map((todo,index)=>{\n\n                return(\n                <tr id={\"id\"+todo.id}  key={todo.id} className={this.trColor(todo.completed)}>\n                <td>\n                    {index+1}\n                </td>\n                    <td> {todo.title}\n                    </td>\n                    <td style={{textDecoration: \"none\"}}>\n                        {todo.completed?\"Done\":\"Not Done\"}{\" \"}<a onClick={this.MarkToggle.bind(this,todo.id)} href={\"#id\"+todo.id}>Mark {!todo.completed?\"Done?\":\"Not Done?\"}?</a>\n                    </td>\n                    <td><a\n                    style={{color: \"#000\"}} onClick={this.edit.bind(this,todo.id,todo.title)} href=\"#id{todo.id}\">\n                        <i className=\"fa fa-edit fa-lg\"></i> </a>\n                    </td>\n                    <td>\n                        <button onClick={this.onDelete.bind(this,todo.id)} className=\"btn text-danger\"> <i className=\"fa fa-trash fa-lg text-black\"></i></button>\n                    </td>\n\n                </tr>)\n\n       })\n            }\n            </tbody>\n            </table>\n\n            </div>\n               )}\n}\n\nexport default View;\n","import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport 'font-awesome/css/font-awesome.min.css';\nimport Add from \"./Add\";\nimport View from \"./View\";\nimport Header from \"./Header\";\nimport swal from \"sweetalert\";\nimport \"./styles.css\";\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass App extends React.Component{\n    \n    constructor(props)\n    {\n        super(props);\n        this.state={\n        todos: [{\n            title: \"Build a Webpage\",\n            id: this.id(),\n            completed: false\n        },\n        {\n            title: \"Learn React.js\",\n            id: this.id(),\n            completed: false\n        },\n        {\n            title: \"Buy a Car\",\n            id: this.id(),\n            completed: false\n        },\n        {\n            title: \"Meeting with boss!\",\n            id: this.id(),\n            completed: false\n        }\n        ]\n            \n        };\n        this.AddTodo=this.AddTodo.bind(this);\n        this.DelTodo=this.DelTodo.bind(this);\n        this.MarkToggle=this.MarkToggle.bind(this);\n        this.EditTodo=this.EditTodo.bind(this)\n    }\n    \n    id() { return uuidv4(); }\n   \n   \n    //add new todo\n    AddTodo(title,completed)\n    {\n   // const newId=this.state.todos.length+1;\n       const newTodo={\n           title,\n           id: this.id(),\n           completed\n       };\n       \n        this.setState({todos : [...this.state.todos,newTodo]})\n        swal(\"Success!\",\"New Todo Added\",\"success\")\n      \n    }\n    EditTodo(id,title)\n    {\n    var newTitle=prompt(\"Edit Todo Item\",title);\n      \nif(newTitle) {\n        this.setState({todos :             this.state.todos.map((todo)=>{if (todo.id===id)\n        {\n            \n            todo.title=newTitle;\n        \n        }\n        return todo\n        }\n        \n        )});\n        swal(\"Success!\",\"Todo Item Updated\",\"success\")\n        \n        }\n        else\n        {\n            swal(\"Failed!\",\"Todo Item Not Updated Succesfully\",\"warning\")\n        }\n    }\n    MarkToggle(id)\n    {\n   \n        this.setState({todos :             this.state.todos.map((todo)=>{if (todo.id===id)\n        {\n            todo.completed=!todo.completed;\n            \n        }\n        return todo\n        }\n        \n        )})\n    }\n    \n\n        DelTodo(id)\n    {\n        \n    \n    \n    if(window.confirm(\"Do you really want to delete this item?\")){\n      this.setState({todos : this.state.todos.filter((todo)=>{return todo.id!==id})})\n    swal(\"Success!\",\"Todo Item Deleted successfully\",\"success\");\n       }\n       else\n       {\n           swal(\"Failed!\",\"Todo Item Not Deleted successfully\",\"warning\");\n       }\n    }\n    \n    addDel()\n    {\n        if(this.state.todos.length>0){\n        return(\n         <View edit={this.EditTodo} delTodo={this.DelTodo} marktog={this.MarkToggle} todos={this.state.todos}/>)}\n         else\n         {\n             return(\n             <div className=\"container\">\n             <Header/>\n                 <p className=\"text-info\">Try to add Something to View Todo Items List</p>\n                 <img style={{maxWidth: \"100%\",\n    height: \"auto\",marginBottom: \"3rem\"}} alt=\"No results found\" src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTpUyqGY6n0sBIt65xON211J9Za6yZpn7AblVQirTmhfcnFeAMy\"/>\n                 </div>\n             )\n         }\n    }\n    \n    \n    \n    render(){\n    return(\n     <div className=\"h-100 row align-items-center\">\n     <div className=\"col\"><h2 className=\"bg-secondary p-3 mt-2 text-white text-center\">Todo List App</h2>\n        <Add  AddTodo={this.AddTodo} />\n        {this.addDel()}\n     </div>\n     </div>\n    \n    \n    );\n    }\n    \n    }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}